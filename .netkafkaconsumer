using System;
using Confluent.Kafka;
using MySql.Data.MySqlClient;
using Newtonsoft.Json;

class Program
{
    static void Main(string[] args)
    {
        // Configure Kafka consumer settings
        var consumerConfig = new ConsumerConfig
        {
            BootstrapServers = "kafka-broker1:9092,kafka-broker2:9092",
            GroupId = "mysql-consumer-group",
            AutoOffsetReset = AutoOffsetReset.Earliest,
        };

        using (var consumer = new ConsumerBuilder<Ignore, string>(consumerConfig).Build())
        {
            var topic = "kafka-topic-name"; // Replace with your Kafka topic

            consumer.Subscribe(topic);

            while (true)
            {
                try
                {
                    var message = consumer.Consume();

                    // Deserialize the JSON message into an object
                    var data = JsonConvert.DeserializeObject<DataModel>(message.Value);

                    // Insert the data into MySQL
                    InsertDataIntoMySQL(data);
                }
                catch (ConsumeException e)
                {
                    Console.WriteLine($"Error consuming message: {e.Error.Reason}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing message: {ex.Message}");
                }
            }
        }
    }

    static void InsertDataIntoMySQL(DataModel data)
    {
        using (var connection = new MySqlConnection("connection-string-here")) // Replace with your MySQL connection string
        {
            connection.Open();

            using (var command = new MySqlCommand("INSERT INTO your_table (column1, column2, ...) VALUES (@value1, @value2, ...)", connection))
            {
                command.Parameters.AddWithValue("@value1", data.Value1);
                command.Parameters.AddWithValue("@value2", data.Value2);
                // Add parameters for other columns

                command.ExecuteNonQuery();
            }
        }
    }

    class DataModel
    {
        public string Value1 { get; set; }
        public string Value2 { get; set; }
        // Add properties for other columns as needed
    }
}
